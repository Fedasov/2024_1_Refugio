// Code generated by MockGen. DO NOT EDIT.
// Source: ./isession.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "mail/internal/microservice/session/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionServer is a mock of SessionServer interface.
type MockSessionServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServerMockRecorder
}

// MockSessionServerMockRecorder is the mock recorder for MockSessionServer.
type MockSessionServerMockRecorder struct {
	mock *MockSessionServer
}

// NewMockSessionServer creates a new mock instance.
func NewMockSessionServer(ctrl *gomock.Controller) *MockSessionServer {
	mock := &MockSessionServer{ctrl: ctrl}
	mock.recorder = &MockSessionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServer) EXPECT() *MockSessionServerMockRecorder {
	return m.recorder
}

// CleanupExpiredSessions mocks base method.
func (m *MockSessionServer) CleanupExpiredSessions(ctx context.Context, input *proto.CleanupExpiredSessionsRequest) (*proto.CleanupExpiredSessionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredSessions", ctx, input)
	ret0, _ := ret[0].(*proto.CleanupExpiredSessionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockSessionServerMockRecorder) CleanupExpiredSessions(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockSessionServer)(nil).CleanupExpiredSessions), ctx, input)
}

// CreateSession mocks base method.
func (m *MockSessionServer) CreateSession(ctx context.Context, input *proto.CreateSessionRequest) (*proto.CreateSessionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, input)
	ret0, _ := ret[0].(*proto.CreateSessionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionServerMockRecorder) CreateSession(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionServer)(nil).CreateSession), ctx, input)
}

// DeleteSession mocks base method.
func (m *MockSessionServer) DeleteSession(ctx context.Context, input *proto.DeleteSessionRequest) (*proto.DeleteSessionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, input)
	ret0, _ := ret[0].(*proto.DeleteSessionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionServerMockRecorder) DeleteSession(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionServer)(nil).DeleteSession), ctx, input)
}

// GetLoginBySession mocks base method.
func (m *MockSessionServer) GetLoginBySession(ctx context.Context, input *proto.GetLoginBySessionRequest) (*proto.GetLoginBySessionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginBySession", ctx, input)
	ret0, _ := ret[0].(*proto.GetLoginBySessionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginBySession indicates an expected call of GetLoginBySession.
func (mr *MockSessionServerMockRecorder) GetLoginBySession(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginBySession", reflect.TypeOf((*MockSessionServer)(nil).GetLoginBySession), ctx, input)
}

// GetProfileIDBySession mocks base method.
func (m *MockSessionServer) GetProfileIDBySession(ctx context.Context, input *proto.GetLoginBySessionRequest) (*proto.GetProfileIDBySessionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileIDBySession", ctx, input)
	ret0, _ := ret[0].(*proto.GetProfileIDBySessionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileIDBySession indicates an expected call of GetProfileIDBySession.
func (mr *MockSessionServerMockRecorder) GetProfileIDBySession(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileIDBySession", reflect.TypeOf((*MockSessionServer)(nil).GetProfileIDBySession), ctx, input)
}

// GetSession mocks base method.
func (m *MockSessionServer) GetSession(ctx context.Context, input *proto.GetSessionRequest) (*proto.GetSessionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, input)
	ret0, _ := ret[0].(*proto.GetSessionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionServerMockRecorder) GetSession(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionServer)(nil).GetSession), ctx, input)
}
