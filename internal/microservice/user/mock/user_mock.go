// Code generated by MockGen. DO NOT EDIT.
// Source: ./iuser.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "mail/internal/microservice/user/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServer is a mock of UserServer interface.
type MockUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerMockRecorder
}

// MockUserServerMockRecorder is the mock recorder for MockUserServer.
type MockUserServerMockRecorder struct {
	mock *MockUserServer
}

// NewMockUserServer creates a new mock instance.
func NewMockUserServer(ctrl *gomock.Controller) *MockUserServer {
	mock := &MockUserServer{ctrl: ctrl}
	mock.recorder = &MockUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServer) EXPECT() *MockUserServerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServer) CreateUser(ctx context.Context, input *proto.CreateUserRequest) (*proto.CreateUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(*proto.CreateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServerMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServer)(nil).CreateUser), ctx, input)
}

// DeleteUserAvatar mocks base method.
func (m *MockUserServer) DeleteUserAvatar(ctx context.Context, input *proto.DeleteUserAvatarRequest) (*proto.DeleteUserAvatarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAvatar", ctx, input)
	ret0, _ := ret[0].(*proto.DeleteUserAvatarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserAvatar indicates an expected call of DeleteUserAvatar.
func (mr *MockUserServerMockRecorder) DeleteUserAvatar(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAvatar", reflect.TypeOf((*MockUserServer)(nil).DeleteUserAvatar), ctx, input)
}

// DeleteUserById mocks base method.
func (m *MockUserServer) DeleteUserById(ctx context.Context, input *proto.DeleteUserByIdRequest) (*proto.DeleteUserByIdReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", ctx, input)
	ret0, _ := ret[0].(*proto.DeleteUserByIdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockUserServerMockRecorder) DeleteUserById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserServer)(nil).DeleteUserById), ctx, input)
}

// GetUser mocks base method.
func (m *MockUserServer) GetUser(ctx context.Context, input *proto.GetUserRequest) (*proto.GetUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, input)
	ret0, _ := ret[0].(*proto.GetUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServerMockRecorder) GetUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServer)(nil).GetUser), ctx, input)
}

// GetUserByLogin mocks base method.
func (m *MockUserServer) GetUserByLogin(ctx context.Context, input *proto.GetUserByLoginRequest) (*proto.GetUserByLoginReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, input)
	ret0, _ := ret[0].(*proto.GetUserByLoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserServerMockRecorder) GetUserByLogin(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserServer)(nil).GetUserByLogin), ctx, input)
}

// GetUsers mocks base method.
func (m *MockUserServer) GetUsers(ctx context.Context, input *proto.GetUsersRequest) (*proto.GetUsersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, input)
	ret0, _ := ret[0].(*proto.GetUsersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServerMockRecorder) GetUsers(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserServer)(nil).GetUsers), ctx, input)
}

// IsLoginUnique mocks base method.
func (m *MockUserServer) IsLoginUnique(ctx context.Context, input *proto.IsLoginUniqueRequest) (*proto.IsLoginUniqueReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoginUnique", ctx, input)
	ret0, _ := ret[0].(*proto.IsLoginUniqueReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoginUnique indicates an expected call of IsLoginUnique.
func (mr *MockUserServerMockRecorder) IsLoginUnique(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginUnique", reflect.TypeOf((*MockUserServer)(nil).IsLoginUnique), ctx, input)
}

// UpdateUser mocks base method.
func (m *MockUserServer) UpdateUser(ctx context.Context, input *proto.UpdateUserRequest) (*proto.UpdateUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, input)
	ret0, _ := ret[0].(*proto.UpdateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServerMockRecorder) UpdateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServer)(nil).UpdateUser), ctx, input)
}

// UploadUserAvatar mocks base method.
func (m *MockUserServer) UploadUserAvatar(ctx context.Context, input *proto.UploadUserAvatarRequest) (*proto.UploadUserAvatarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAvatar", ctx, input)
	ret0, _ := ret[0].(*proto.UploadUserAvatarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockUserServerMockRecorder) UploadUserAvatar(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockUserServer)(nil).UploadUserAvatar), ctx, input)
}
