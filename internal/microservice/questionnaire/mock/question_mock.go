// Code generated by MockGen. DO NOT EDIT.
// Source: ./iquestion.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "mail/internal/microservice/questionnaire/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionServer is a mock of QuestionServer interface.
type MockQuestionServer struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionServerMockRecorder
}

// MockQuestionServerMockRecorder is the mock recorder for MockQuestionServer.
type MockQuestionServerMockRecorder struct {
	mock *MockQuestionServer
}

// NewMockQuestionServer creates a new mock instance.
func NewMockQuestionServer(ctrl *gomock.Controller) *MockQuestionServer {
	mock := &MockQuestionServer{ctrl: ctrl}
	mock.recorder = &MockQuestionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionServer) EXPECT() *MockQuestionServerMockRecorder {
	return m.recorder
}

// AddAnswer mocks base method.
func (m *MockQuestionServer) AddAnswer(ctx context.Context, input *proto.AddAnswerRequest) (*proto.AddAnswerReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnswer", ctx, input)
	ret0, _ := ret[0].(*proto.AddAnswerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnswer indicates an expected call of AddAnswer.
func (mr *MockQuestionServerMockRecorder) AddAnswer(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockQuestionServer)(nil).AddAnswer), ctx, input)
}

// AddQuestion mocks base method.
func (m *MockQuestionServer) AddQuestion(ctx context.Context, input *proto.AddQuestionRequest) (*proto.AddQuestionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", ctx, input)
	ret0, _ := ret[0].(*proto.AddQuestionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockQuestionServerMockRecorder) AddQuestion(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQuestionServer)(nil).AddQuestion), ctx, input)
}

// GetQuestions mocks base method.
func (m *MockQuestionServer) GetQuestions(ctx context.Context, input *proto.GetQuestionsRequest) (*proto.GetQuestionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", ctx, input)
	ret0, _ := ret[0].(*proto.GetQuestionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockQuestionServerMockRecorder) GetQuestions(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionServer)(nil).GetQuestions), ctx, input)
}

// GetStatistic mocks base method.
func (m *MockQuestionServer) GetStatistic(ctx context.Context, input *proto.GetStatisticRequest) (*proto.GetStatisticReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistic", ctx, input)
	ret0, _ := ret[0].(*proto.GetStatisticReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockQuestionServerMockRecorder) GetStatistic(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockQuestionServer)(nil).GetStatistic), ctx, input)
}
